---
title: "STA 210"
subtitle: "Whole game"
format: html
editor: visual
---

```{r}
#| warning: false

library(tidyverse)
library(tidymodels)
library(palmerpenguins)

penguins <- drop_na(penguins)
```

## Simple linear regression

### Model fitting

```{r}
slr_fit <- linear_reg() |>
  set_engine("lm") |>
  fit(body_mass_g ~ flipper_length_mm, data = penguins)
```

### Model summary

```{r}
tidy(slr_fit)
```

### Model evaluation

```{r}
glance(slr_fit)
```

### Prediction

For new data:

```{r}
new_penguin <- tibble(flipper_length_mm = 172)
predict(slr_fit, new_penguin)
```

For data used to fit the model:

::: callout-warning
Which of the following, if any, to use?
I wish `augment(slr_fit)` worked...
:::

```{r error = TRUE}
augment(slr_fit) # wish it worked
augment(slr_fit$fit) # avoid this
augment(slr_fit, new_data = penguins) # needs good articulation why it's diferent than tidy() and glance()
predict(slr_fit, new_data = penguins)
```

### Inference

#### Simulation-based inference

Confidence interval for the slope:

::: callout-warning
Since earlier we did `fit (y ~ x, data)` it's odd to switch gears here and do `specify()` and then `fit()`.
I wonder if starting with tidymodels to begin with it's better not at all to introduce infer?
What would be the alternative way of doing the following in tidymodels then?
:::

```{r}
set.seed(1120)

observed_fit <- penguins |>
  specify(body_mass_g ~ flipper_length_mm) |>
  fit()

boot_fits <- penguins |>
  specify(body_mass_g ~ flipper_length_mm) |>
  generate(reps = 100, type = "bootstrap") |>
  fit()

get_confidence_interval(
  boot_fits, 
  point_estimate = observed_fit, 
  level = 0.95,
  type = "percentile"
)
```

Hypothesis test for the slope:

```{r}
set.seed(1234)

null_dist <- penguins |>
  specify(body_mass_g ~ flipper_length_mm) |>
  hypothesize(null = "independence") |>
  generate(reps = 100, type = "permute") |>
  fit()

get_p_value(
  null_dist,
  obs_stat = observed_fit,
  direction = "two-sided"
)
```

Other inference

::: callout-warning
How do we do these with tidymodels and in a simulation-based way?

-   Confidence interval for a new prediction
-   Prediction interval for a new prediction
:::

#### Theoretical inference

Confidence interval and hypothesis test for the slope:

```{r}
tidy(slr_fit, conf.int = TRUE)
```

::: callout-warning
What is the recommended way to do diagnostic plots for theoretical inference, especially since `augment()` is not designed to be used with the full data?
:::

```{r}
library(ggfortify)
autoplot(slr_fit)
```

Confidence interval for a new prediction:

```{r}
predict(slr_fit, new_data = new_penguin, type = "conf_int")
```

Prediction interval for a new prediction:

```{r}
predict(slr_fit, new_data = new_penguin, type = "pred_int")
```

## Multiple linear regression

## Logistic regression

## Multinomial logistic regression
